##### 单例模式

#### 1. 饿汉式:非常饥饿，直接创建对象
```java
public class Hungry {

    // 直接初始化可能会浪费空间
    private byte[] arr1 = new byte[1024 * 1024];
    private byte[] arr2 = new byte[1024 * 1024];
    private byte[] arr3 = new byte[1024 * 1024];
    private byte[] arr4 = new byte[1024 * 1024];

    // 私有化构造器，防止被外部创建实例
    private Hungry() {}

    private static final Hungry hungry = new Hungry();

    public static Hungry getInstance() {
        return hungry;
    }
}
```

#### 2. 懒汉式:使用双重检查锁的方式实现
```java
public class Lazy {
    private static volatile Lazy lazy  = null;

    private Lazy(){}

    public static Lazy getInstant(){
        if (lazy == null){
            synchronized (Lazy.class){
                if (lazy == null){
                    // java中新建对象不是一个原子操作
                    lazy = new Lazy();
                    return lazy;
                }
            }
        }
        return lazy;
    }
}
```

#### 3. 静态内部类:利用JVM的类加载机制特性来保证全局单例
```java
public class Holder {
    // 私有化构造器
    private Holder() {
    }

    public static Holder getInstance() {
        return InnerClass.holder;
    }

    // 静态内部类
    private static class InnerClass {
        private static final Holder holder = new Holder();
    }
}
```